generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Muscle {
  id String @id @default(uuid())
  name String
  slug String
  imageUrl String
  exercises Exercise[]
}

model Exercise {
  id String @id @default(uuid())
  name String
  enabled Boolean @default(false)
  difficulty String
  instructions String
  image String[]
  slug String
  muscleId String
  muscle Muscle @relation(fields: [muscleId], references: [id])
  training Training[]
}

model TrainingSplit {
  id String @id @default(uuid())
  name String
  enabled Boolean @default(true)
  training Training[]
}

model Training {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: userId, references: [id])
  name String
  order Int
  current Boolean
  next Boolean
  trainingSplitId String
  trainingSplit TrainingSplit @relation(fields: [trainingSplitId], references: [id])
  exerciseId String
  exercice Exercise @relation(fields: exerciseId, references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  training      Training[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}